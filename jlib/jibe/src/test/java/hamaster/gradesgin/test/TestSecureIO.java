package hamaster.gradesgin.test;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import org.junit.jupiter.api.Test;

import hamaster.gradesgin.util.IBECapsule;
import hamaster.gradesgin.util.IBECapsuleAESImpl;
import hamaster.gradesign.ibe.util.Hex;

public class TestSecureIO {

    String testData = "aced00057a00000400144145532f4342432f504b43533550616464696e67075348412d353132bbe6954bf94841eb519a2fd72f12c3aef9283a67ab420acc69bb1e4cc93bb355a9ac03f912d73b17ab67e278bb8dca7864a4cbe491f5a054700cf960d5a52e9d00000d6700000d707433b4d509410594845a1d1e569fa39736f8bd7082b15da44b2630f7aac4ff2ac21965300b95688660c37970a4031172027340f1bc7ef804a79c8921f411f93f59dde309d009f982a1d941e2f817f25247af8c2cccf85be8793ec36cb7b9426320e895fe0c34115ee98b9de5d3be2c5c0e8a8d1c1981a932fbb471b9dfbbea0b6710dc9336cb9d10c104d4c1dea70cba9acbaf934411b42f60fe584ec36d2318d5b9bfa8f9a0984be022c9c963e5defd18154a7237a5d5789d6c644275eb088b1748d37caa548cb35a67745dbb1fd97d70731c12411d2c1df4917888edbca6b7e5dda329583c837dba22094b41415000e0f0bfba4be5d4d085961e76631d0ae35f42ae18891e369d563ddd2bf3c011f9834ed884c7f68786b4bed659ba728f4e401e3ada912664577f14d4b3a40d6669a85c922682be989faf83a807629b21ade41086fb12bdeaaa0021aa6c0928af0a3a7841ba3d89321b9aa571c309cce82faa17a6c141cae345529da559bf6cef264cf133932075d2f9153b9a6ef61c7521baa092a5cd791dff72bee513edfc5d2a1b37e850c97da4054c3aa1d1fd84e66c3eb1513df80524cafa3989efacbdfc272dcb316c3a0148420481fd217a5c66d4158fb76625c782c44991c8d93a6ba9ea526fa5289637eaa2bbcc8905d0b3515d310cef96ca34f5d4a9871b7783c65e11ab1637f9f707a9e861db881104afbb7373054522802d34089549096ae99f931881fa6deb11a8ae9a972d347298122ba62c1232d620c4b320436221f6e7463728f5b6f72887e58ba4837ae9319a63dfaeb62acc3d0bed220242b636e5c634808842332ed16b53d7dba3f74e7ce6c9ab6588de61df0d178664b85867cf4e909af625c3db7cdac7e98b36df525bccd706b7f8296514b66644153c3f1aa064095ccf00ec0a50868ae88c11370695b9958254222179d290104e8931fd162742970a4a171f9baee7848eebb999d3077181b1059bb814919f15c31b11f54cecfb0981ee298d17cbdce4ceed37b59533de09beeedd7dd2c5dba523d620770b73b10a9b415b3f6c29ee13ab4d557b5ea6837ff087bb65116d0b75812442c2e0b731d5271d9330100b1a0a494a884a74c48a6b12ea4f9d719c9e310e2bd10e4d447630f3f811142afe9c28036b6993e44557ddd75c7dd24916e8eca5685b65752e4f562b614c3fc93ef3d211e095b76767b2a02142fb3e9b6af503db5623a7eb007a8196b8f973b9c0283aeffc65d746df5829688e54e080c8ee5832ddd919da794d7caf2bbd1af58b45d96764e2e2be7a000004003ac64e090a31d1b38d8e3099bdf45eb821c28c718c250f8c9e83d7db7976face85c0c2463e0024926cd8d62bfd71e28bfcccb0ab69a2cf0615578c7567336fe35fbc0f197a096e9b61a82607cf76da263ef535003ee166dff83920e76d068875e42989942738619262d4d7da79837feba88c03e180a464dff713ecf0954870d55f454258e738e963f38073ad2f98a971ff0fd33b6b45a4b7539c2b870673823604dcc407c5a44ee812937c084ee00adc9883b9ac1389d07adcad3b7ec698259806b98722cb20c00285bfc1a285ab59e72e02b67be6ebc9d87ee2ed9d08b16f6781a447a88667a33a882808a248b9ca1b2a6127c4a3eb5a271b07d2356130d3ea53f6ee33703bd3e16412b482a2d322b22ea06f88b512adf1b27b47a012fc81c8c8f2608dd0e3e17328c7c99df56301d86cf72808e81c4bcb31b852b810ac212b973da1c219f72c3dde86fb175ecdfcd653f1e0dfcb2732f47142d118fbde6f068c50eb158ee50f2db4afee36b19b883b557cc6d5961d35935b62edbea5ec471f2600342789d23887f00a14ed04b0c7e437551ca1f7d9e6b70ac3c992b047370326addd114a508b74188abcf6d1235ee87ce47de2dca279449f4586af695d85a8c09d997682404e42644d8adff9084a2bf1b2089293bbcd432b5f8ad4c2021704126ea6ab851920dea8bb833116c98f1e55f0e034dec61ff84814870841dd1e66a99d7fee3675b52c3c7c9dece243fa1db554ccf1a0adae40adf13c7d9ebded2697160fbaa2922d4e563601473a1f411f45c916d12e8771da32cf3600752ecdecae2dccb46e2cd3cc213545185d326b099c7fbb7d533c8ef56060b950729cc995399e6c2e4314dbd9a7f485d4feb104dd99bf080d1f327e4a55269bc5b9133e81890b057af2b5efab77b57dfccefd8b1a4079248011328a5d958eb862c49e4f9d26f56f08c1c35ea0a7c7d266564de71a8d53c31eeae11089604d893e0a91c1aefab59cae53e476d99408bbcce41508509476c7b9a11d73fc206e4ed27fb1926306af2667a04439c73b6942fedc5857f4c4d03af2001c597546eaa64acd77edb0ae2e003a94e92bd0adeaa7bb7c11924497bb2b03c89d9f06d2f352b4f9fc0aa2943c30d453618d67a75f2de62befc7e436a1152ee7c20a3a2424010d69a4eaa4f351db8296a5f8c908b5cfe9d2b1e553f1a086614b30f1175e2ca7b8bb620de222949708fcccfcc78259c78a2cc03aa572584ece847df8702b3d10fe04f16c74c884366bde5b11288b55f852991ce2a9249bde6eaaca9e01bfa6c2b0bac0961048de2a0c91ec3387aa948a0692ff545447b5c05ada161cf11e6a5a741a346a89727128e3646eb7c06fb1004515ca66e75500bcaae59bc70b24eac137fd4daa326f3e816d93a6a6b1b3763257c38f2f614e4e8a0e08db3a90a75311b295c041f97a0000040062d1e7919783c5cbd730201d4130b489838c86a9327d92bdb45d82de5c0096c3b0fe66ff5b49c86336e40c08593abbbb8d624e5a3de65853f78c08fdfbf0f27516cddb5a3c9a14c42d5075696fd4db8c24fc49bf48d8767f6ca4ed4ee4fefde2fc918eec007da2cdcc296bf06a05018008f1480aab30ef157b27795cf5255a26c58641aaf5644ee21e67833ab48827b196a1b974b8ed8de783b7212afec11c559159cbe3acf52d069f1fd60dd72af015eb6dd94c7bbeb3e108a401ce09bb6d9dc3eef20a33b6143544fbd502b78e8f225791c6bb377abf930a034e1923818fdcea1dea9bf239681b047d69d51ea429db4813f32c0b2df21a0be533d3049d6eaef3165a5a16121d99b5119bf05eac7128e73cbcf95b2c8efb6a0838e623484ca3f418c2d3f4e6073b1ab8e6f882b466f5b799f6cead3b2e240ec7d7383c83cd985342c16deb0848fa1234267a66a5eff1b1995f405d49f1334c909564045b9a9c6f4a82458fd0ceb7344ab4f9a0d72e75d96f64a48f793839bacbb0a4fcfaaea2da1acf3647d3caca20fb5b01ccb4b8553345165f843cac5cf61e13ecf66ab93ee92fe16f187e5d0d00ba0fd5ee250d399a30be13fcf37862745af2880c4ef74d56a451d3ada22f99383edf88eb2b6c13625b3b1fc3275563401050e80e9e94c56a31e9f5544465f492b2f9b8e1edcf9c1f5408cab55b254b2d622316b7e317751c607bfad7b7128f811eb4c27be860ad93c2b256f17ef8ea0050a4ec122fc01ae8e91a3b1bf16934fc98a29301729b1dbfcb30b79af3a4727dae4bdc0844d4a449ad8f6a15e93aa43af6283671f7a26016c1781b8f5d271f62464ef176d81047f5e9511a3463cd2aea4919cfd176a011cee505350b3d78562e3730f3fa217db03bad27c64834bb626544eff9335520b6ca089b58a2178c05c534293fa975815880e220dcaef8369ac413a5f250f45030d7731b557b270b187ae9c1b2340c40eb8d031ecc44c90b199451816b55651ef201f9fc133118367e62d3fd9017e4e4d04a2e02210e81b980417b9a60845e6794d2223486a3cec256a1a90dc4370bbea67502de4d5c38be9f487a3ba8e2a8e4ca380744486d0ed55ce15bf1bb9df1bec5dedbb2a65182c58c546b2c213cb3a3511ecf248593eae30030a51d88acbb0e62cd7a1c55713b3e21afe19651b1bd2e771f5d2c28f973867b5d222f614e8a83464a200fcfdb40757be1be47d3424b44f89727492e795c7871dac7564db4d3f059d5a0bc545d784ff32aabb5863ae92ece8bf97000c4a58aeb2d52bb65dc50664372eeec915f04e827f719c936cef2b7571ab435696924900ddb0ae2cb9d504fa2433081a3918c9cc4f2fee525ab315a60851829050323ea5e7917c74e1e63681199a27897d3d47ef97a503fc6ee49391509b8a4f134bcd2229df4c492104636f47a000001d563ec41e7f0500d4996ffa0ae357c08070fa0d1c868fde1476e6c5b278e2d3344a74b9e7d7a94b6ad3f583c17d80b7ccec2b0409394d98959ebf93a58c156bd57f11c23aa555c2b4883588da698361ef48309e50437e47b0a52c3bf8d3a663f9123abfe5d0628f7ae1c6c299249ae67e5bcd7ec19fd8d9bc04f05e6dfa8a903ae8a976792be2cf57e840c2cf73fd094956300e94a86cebbcbe8361ca5cd978a473c28fa326b161d29cc287876019beab7b4a370f4374b2b9b90c6330cadd27fb62d10a1bef95a9ee490450e2b626c4c689c15e1b062b54025b68bd8a40782c48d7c1e16eb544d7395fc49276c832c06511a4e3de3c1b6b663a9a4bf0556dbf564c350f5fb9399fd89129609ef17cd80c0f3c33c6781a4c406bb74bb12b558f3c4547f990f5292a82c5d38627aee2c7c2f1c355c32a2cb56ba3a5c70605aaa244376e81983b9ce78b3decf30b31ce3664678218b8ecc8c2f53e642559d626ba0dc5995b20e47e98a9d76793742838c2618dfb506cd8ccff5a7e8f37521b457d3af74b70899be5228e0a520bcf3fd1d4da63769928ebfaa48dd22ba433d77f2b6a153efdeb80d9ae660a318b8a333ab4b04370fca45da771918ae3586482251053f38a49963d1f00a58a2e17ba46f7b10188197c922cd";

    String key = "123gfhf5h;9080";

    @Test
    public void testByteArray() {
        IBECapsule capsule = new IBECapsuleAESImpl();
        capsule.setKey(key.getBytes());
        capsule.protect(Hex.unhex(testData));
        try {
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            capsule.writeExternal(bout);
            bout.flush();
            byte[] secure = bout.toByteArray();
            bout.close();
            String sec = Hex.hex(secure);
            System.out.println("secure data:\n" + sec);
            System.out.println("length:" + secure.length);
            ByteArrayInputStream bin = new ByteArrayInputStream(secure);
            System.out.println("bina:" + bin.available());
            IBECapsule capsule1 = new IBECapsuleAESImpl();
            capsule1.setKey(key.getBytes());
            capsule1.readExternal(bin);
            byte[] sData = capsule1.getData();
            String s = Hex.hex(sData);
            System.out.println(s);
            assertEquals(testData, s);
            capsule.close();
            capsule1.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testObject() {
        IBECapsule capsule = new IBECapsuleAESImpl();
        capsule.setKey(key.getBytes());
        capsule.protect(testData);
        try {
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            capsule.writeExternal(bout);
            bout.flush();
            byte[] secure = bout.toByteArray();
            bout.close();
            String sec = Hex.hex(secure);
            System.out.println("secure data:\n" + sec);
            System.out.println("length:" + secure.length);
            ByteArrayInputStream bin = new ByteArrayInputStream(secure);
            System.out.println("bina:" + bin.available());
            IBECapsule capsule1 = new IBECapsuleAESImpl();
            capsule1.setKey(key.getBytes());
            capsule1.readExternal(bin);
            Object sData = capsule1.getDataAsObject();
            System.out.println(sData);
            assertEquals(testData, sData);
            capsule.close();
            capsule1.close();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
